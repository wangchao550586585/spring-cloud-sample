server:
  port: 8080
spring:
  #zipkin使用rabbitmq采集数据
  zipkin:
    #base-url: http://localhost:9411/      #server的请求地址
    sender:
      #type: web     #数据的传输方式,以Http的形式向server端发送数据
      type: rabbit
  sleuth:
    sampler:
      probability: 1   #采样比   收集所有的数据
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    listener:   #配置重试策略
      direct:
        retry:
          enabled: true
      simple:
        retry:
          enabled: true
  application:
    name: service-gateway
  redis:
    host: localhost
    port: 6379
    password: root
    database: 0
  #配置gateWay路由
  cloud:
    gateway:
      routes:
         #配置路由,路由id,路由到微服务的url,断言(判断条件)
        - id: service-order
          #uri: http://127.0.0.1:9002      #目标微服务请求地址
          uri: lb://service-order          #根据微服务名称从注册中心拉取服务请求路径
          predicates:                       #断言,路由条件,将/order/** 拦截, uti+Path访问
            #- Path=/order/**
            - Path=/pre-order/**            #使用重写过滤器将当前路径转发到 http://127.0.0.1:9002/order/**
          #配置路由过滤器
          filters:        #yml中$需要写成$\      访问路径http://localhost:8080/pre-order/order/9
            - RewritePath=/pre-order/(?<segment>.*),/$\{segment}   #路径重写过滤器,将1和2级路径重写为2级路径
#            - name: RequestRateLimiter
#              args:
#                  #使用SpEL从容器中获取对象
#                key-resolver: '#{@pathKeyResolver}'
#                  #令牌桶每秒填充平均速率
#                redis-rate-limiter.replenishRate: 1
#                  #令牌桶上限
#                redis-rate-limiter.burstCapacity: 3

      #配置自动根据微服务名称进行路由转发    http://localhost:8080/service-order/order/9
      discovery:
        locator:
          enabled: true   #开启根据服务名称自动转发
          lower-case-service-id: true   #微服务名小写呈现

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
  instance:
    prefer-ip-address: true

logging:
  level:
    root: info
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.cloud.sleuth: DEBUG